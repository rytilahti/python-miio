[tool.poetry]
name = "python-miio"
version = "0.6.0.dev0"
description = "Python library for interfacing with Xiaomi smart appliances"
authors = ["Teemu R <tpr@iki.fi>"]
repository = "https://github.com/rytilahti/python-miio"
documentation = "https://python-miio.readthedocs.io"
license = "GPL-3.0-only"
readme = "README.md"
packages = [
  { include = "miio" }
]
keywords = ["xiaomi", "miio", "miot", "smart home"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: End Users/Desktop",
  "Operating System :: OS Independent",
  "Topic :: System :: Hardware",
  "Topic :: Home Automation"
]

[tool.poetry.scripts]
mirobo = "miio.integrations.roborock.vacuum.vacuum_cli:cli"
miio-extract-tokens = "miio.extract_tokens:main"
miiocli = "miio.cli:create_cli"

[tool.poetry.dependencies]
python = "^3.8"
click = ">=8"
cryptography = ">=35"
construct = "^2.10.56"
zeroconf = "^0"
attrs = "*"
pytz = "*"
appdirs = "^1"
tqdm = "^4"
micloud = { version = ">=0.6" }
croniter = ">=1"
defusedxml = "^0"
pydantic = ">=1,<3"
PyYAML = ">=5,<7"

# doc dependencies
sphinx = { version = "*", optional = true }
sphinx_click = { version = "*", optional = true }
sphinxcontrib-apidoc = { version = "*", optional = true }
sphinx_rtd_theme = { version = ">=1.3.0", optional = true }
myst-parser = { version = "*", optional = true }

# optionals
netifaces = { version = "^0", optional = true }
android_backup = { version = "^0", optional = true }

[tool.poetry.extras]
docs = ["sphinx", "sphinx_click", "sphinxcontrib-apidoc", "sphinx_rtd_theme", "myst-parser"]
updater = ["netifaces"]
backup_extract = ["android_backup"]

[tool.poetry.dev-dependencies]
pytest = ">=6.2.5"
pytest-cov = "*"
pytest-mock = "*"
pytest-asyncio = "*"
pre-commit = "*"
doc8 = "*"
restructuredtext_lint = "*"
tox = "*"
isort = "*"
cffi = "*"
docformatter = "*"
mypy = {version = "*", markers = "platform_python_implementation == 'CPython'"}
coverage = {extras = ["toml"], version = "*"}


[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88
forced_separate = "miio.discover"
known_first_party = "miio"
known_third_party = ["appdirs",
  "attr",
  "click",
  "construct",
  "croniter",
  "cryptography",
  "netifaces",
  "pytest",
  "pytz",
  "setuptools",
  "tqdm",
  "zeroconf"
]


[tool.coverage.run]
source = ["miio"]
branch = true
omit = ["miio/*cli.py",
  "miio/extract_tokens.py",
  "miio/tests/*",
  "miio/version.py"
]

[tool.coverage.report]
exclude_lines = [
  # ignore abstract methods
  "raise NotImplementedError",
  "def __repr__"
]

[tool.mypy]
# misc disables "Decorated property not supported", see https://github.com/python/mypy/issues/1362
# annotation-unchecked disables "By default the bodies of untyped functions are not checked"
disable_error_code = "misc,annotation-unchecked"

[tool.doc8]
paths = ["docs"]
# docs/index.rst:7: D000 Error in "include" directive:
# invalid option value: (option: "parser"; value: 'myst_parser.sphinx_')
# Parser "myst_parser.sphinx_" not found. No module named 'myst_parser'.
ignore-path-errors = ["docs/index.rst;D000"]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
